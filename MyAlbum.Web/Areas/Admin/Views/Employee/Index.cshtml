@{
    ViewData["Title"] = "員工列表";
}

@{
    var canWrite = User.HasClaim("perm", "Employee.Write");
}

@section Scripts{
    <script>
        function getAfToken() {
            const fromCreate = document.querySelector('#createEmpBody input[name="__RequestVerificationToken"]');
            if (fromCreate) return fromCreate.value;
            const fromUpdate = document.querySelector('#updateEmpBody input[name="__RequestVerificationToken"]');
            if (fromUpdate) return fromUpdate.value;
            const fromSearch = document.querySelector('#searchForm input[name="__RequestVerificationToken"]');
            return fromSearch ? fromSearch.value : '';
        }
        // 表格查詢 =======================
        // 主查詢函式
        async function submitSearch(pageIndex){
            const form = document.getElementById('searchForm');
            const pageSize = document.getElementById('pageSizeInput').value || 10;
            const fullName = document.querySelector('input[name="Data.FullName"]').value || '';

            // 允許外部指定頁碼；未指定則維持目前值
            const currentPage = pageIndex ?? Number(form.querySelector('[name="PageIndex"]').value || 1);

            // 更新表單內的隱藏欄位（保持 UI 與狀態一致）
            form.querySelector('[name="PageIndex"]').value = currentPage;

            const payload = {
                PageIndex: currentPage,
                PageSize: Number(pageSize),
                Data: {
                    FullName: fullName
                }
            };
            const resp = await fetch('@Url.Action("IndexPartial","Employee", new { area="Admin" })', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAfToken()
                },
                body: JSON.stringify(payload)
            });

            const html = await resp.text();
            if (!resp.ok) {
                console.error(html);
                document.getElementById('tableHost').innerHTML =
                `<div class="alert alert-danger">查詢失敗（${resp.status}）。</div>`;
                return;
            }
            // 把部分視圖直接塞進容器
            document.getElementById('tableHost').innerHTML = html;
        }

        // 更換每頁筆數：同步隱藏欄位並回第 1 頁查詢
        function onPageSizeChanged(){
            const sel = document.getElementById('pageSizeSelect');
            document.getElementById('pageSizeInput').value = Number(sel.value || 10);
            document.querySelector('input[name="PageIndex"]').value = 1;
            submitSearch(1);
        }

        // 清空再查
        function resetAndSearch(){
            const form = document.getElementById('searchForm');
            form.reset();
            // 同步 pageSize 隱藏欄位
            const sel = document.getElementById('pageSizeSelect');
            document.getElementById('pageSizeInput').value = Number(sel.value || 10);
            form.querySelector('[name="PageIndex"]').value = 1;
            submitSearch(1);
        }
        // 表格查詢 =======================
        // 檢視彈窗 =======================
        async function openDetails(id){
          const url = '@Url.Action("DetailsPartial","Employee", new { area="Admin" })' + `?id=${id}`;
          const res = await fetch(url, { method: 'GET' });
          const body = document.getElementById('detailsBody');

          if(!res.ok){
            body.innerHTML = `<div class="text-danger">讀取失敗（${res.status}）</div>`;
          }else{
            const html = await res.text();
            body.innerHTML = html; // 直接塞進 Modal
          }
          new bootstrap.Modal('#detailsModal').show();
        }
        // 檢視彈窗 =======================
        // 新增彈窗 =======================
        async function openCreateEmployee() {
            const url = '@Url.Action("CreatePartial","Employee", new { area="Admin" })';
            const res = await fetch(url, { method: 'GET' });
            const host = document.getElementById('createEmpBody');

            if (!res.ok) {
                host.innerHTML = `<div class="text-danger">載入失敗（${res.status}）</div>`;
            } else {
                host.innerHTML = await res.text();

                // 設定預設到職日=今天
                const inp = host.querySelector('[name="HireDate"]');
                if (inp && !inp.value) {
                    const dt = new Date();
                    const yyyy = dt.getFullYear();
                    const mm = String(dt.getMonth() + 1).padStart(2, '0');
                    const dd = String(dt.getDate()).padStart(2, '0');
                    inp.value = `${yyyy}-${mm}-${dd}`;
                }
            }
            new bootstrap.Modal('#createEmpModal').show();
        }
        // 新增彈窗 =======================
        // 新增彈窗設定與送出 =======================
        function toggleCreatePwd() {
            const inp = document.querySelector('#createEmpBody [name="Password"]');
            if (inp) inp.type = (inp.type === 'password') ? 'text' : 'password';
        }
        async function submitCreateEmployee() {
            const host = document.getElementById('createEmpBody');
            const err = host.querySelector('#createEmpError');
            const btn = host.querySelector('#btnCreateSubmit');
            const v = (name) => (host.querySelector(`[name="${name}"]`)?.value || '').trim();

            const payload = {
                LoginName: v('LoginName'),
                FullName: v('FullName'),
                Title: v('Title'),
                Email: v('Email'),
                Password: v('Password'),
                HireDate: v('HireDate') // yyyy-MM-dd，後端是 DateOnly
            };

            if (!payload.LoginName || !payload.FullName || !payload.Password || !payload.HireDate) {
                err.textContent = '請填寫必填欄位。';
                err.classList.remove('d-none');
                return;
            }

            err.classList.add('d-none');
            btn.disabled = true;

            try {
                const resp = await fetch('@Url.Action("CreateEmployee","Employee", new { area="Admin" })', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAfToken() // 若後端加了 [ValidateAntiForgeryToken] 才需要
                    },
                    body: JSON.stringify(payload)
                });

                const text = await resp.text();
                if (!resp.ok) {
                    err.textContent = `建立失敗（${resp.status}）：` + (text || '請稍後重試');
                    err.classList.remove('d-none');
                    return;
                }

                // 成功：關閉、刷新列表到第1頁
                bootstrap.Modal.getInstance(document.getElementById('createEmpModal')).hide();
                if (typeof submitSearch === 'function') submitSearch(1);
            }
            catch (ex) {
                err.textContent = '建立失敗：' + (ex?.message || ex);
                err.classList.remove('d-none');
            }
            finally {
                btn.disabled = false;
            }
        }
        // 新增彈窗設定與送出 =======================
        // 編輯彈窗 =======================
        async function openUpdateEmployee(id){
            const url = '@Url.Action("UpdatePartial", "Employee", new { area = "Admin" })' + `?id=${id}`;
            const host = document.getElementById('updateEmpBody');
            host.innerHTML = '載入中...';
            const res = await fetch(url);
            host.innerHTML = res.ok ? await res.text() : `<div class="text-danger">載入失敗（${res.status}）</div>`;
            new bootstrap.Modal('#updateEmpModal').show();
        }
        // 編輯彈窗 =======================
        // 編輯彈窗設定與送出 =======================
        function toggleUpdatePwd(){
          const inp = document.querySelector('#updateEmpBody [name="NewPassword"]');
          if (inp) inp.type = (inp.type === 'password') ? 'text' : 'password';
        }

        // 送出更新
        async function submitUpdateEmployee(){
          const host = document.getElementById('updateEmpBody');
          const err  = host.querySelector('#updateEmpError');
          const btn  = host.querySelector('#btnUpdateSubmit');

          const v = (name) => (host.querySelector(`[name="${name}"]`)?.value || '').trim();

          const payload = {
            EmployeeId: Number(v('EmployeeId')),
            FullName:   v('FullName'),
            Title:      v('Title'),
            Email:      v('Email'),
            NewPassword:v('NewPassword'),
            HireDate:   v('HireDate') || null
          };

          if (!payload.EmployeeId || !payload.FullName){
            err.textContent = '請至少填寫必填欄位（姓名）。';
            err.classList.remove('d-none');
            return;
          }

          err.classList.add('d-none');
          btn.disabled = true;

          try{
            const resp = await fetch('@Url.Action("UpdateEmployee", "Employee", new { area = "Admin" })', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAfToken()
              },
              body: JSON.stringify(payload)
            });

            const text = await resp.text();
            if (!resp.ok){
              err.textContent = `更新失敗（${resp.status}）：` + (text || '請稍後重試');
              err.classList.remove('d-none');
              return;
            }

            bootstrap.Modal.getInstance(document.getElementById('updateEmpModal')).hide();
            if (typeof submitSearch === 'function') {
              submitSearch(1);
            }
          }
          catch(ex){
            err.textContent = '更新失敗：' + (ex?.message || ex);
            err.classList.remove('d-none');
          }
          finally{
            btn.disabled = false;
          }
        }
        // 編輯彈窗設定與送出 =======================

        // 切換啟用狀態（停用/啟用）
        async function toggleActive(employeeId, currentlyActive){
            const targetActive = !currentlyActive;
            const verb = targetActive ? '啟用' : '停用';
            const ok = confirm(`確定要${verb}此帳號嗎？`);
            if (!ok) return;

            const payload = {
                EmployeeId: Number(employeeId),
                IsActive: targetActive
            };

            try{
                const resp = await fetch('@Url.Action("UpdateEmployeeActive","Employee", new { area="Admin" })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAfToken()
                },
                body: JSON.stringify(payload)
                });

                const text = await resp.text();
                if(!resp.ok){
                    alert(`${verb}失敗（${resp.status}）：${text || '請稍後重試'}`);
                    return;
                }

                const curPage = Number(document.querySelector('#searchForm [name="PageIndex"]')?.value || 1);
                if (typeof submitSearch === 'function') submitSearch(curPage);
            }
            catch(ex){
                alert(`${verb}失敗：${ex?.message || ex}`);
            }
        }

        // 頁面載入先打一次（預設第 1 頁）
        document.addEventListener('DOMContentLoaded', () => submitSearch(1));
    </script>
}

<div class="container py-3">
    <!-- 工具列：按鈕靠右 -->
    <div class="d-flex justify-content-end mb-2">
        @if (canWrite)
        {
            <button type="button" class="btn btn-primary" onclick="openCreateEmployee()">
                新增員工
            </button>
        }
    </div>
    <!-- 搜尋列（不用 HTMX，交給你自己的 JS） -->
    <form id="searchForm" class="row g-2 align-items-center mb-3" onsubmit="event.preventDefault(); submitSearch(1);">
        @Html.AntiForgeryToken()

        <div class="col-auto">
            <label class="col-form-label">姓名</label>
        </div>
        <div class="col-auto">
            <input class="form-control" name="Data.FullName" placeholder="輸入姓名關鍵字">
        </div>

        <div class="col-auto">
            <select class="form-select" id="pageSizeSelect" onchange="onPageSizeChanged()">
                <option value="10" selected>10 筆</option>
                <option value="20">20 筆</option>
                <option value="50">50 筆</option>
            </select>
            <!-- 真正送出的數字欄位 -->
            <input type="number" name="PageSize" id="pageSizeInput" value="10" class="d-none" />
        </div>

        <input type="number" name="PageIndex" value="1" class="d-none" />

        <div class="col-auto">
            <button type="submit" class="btn btn-primary">搜尋</button>
            <button type="button" class="btn btn-outline-secondary" onclick="resetAndSearch()">清空</button>
        </div>
    </form>

    <!-- 表格容器（由 submitSearch() 塞入部分視圖） -->
    <div id="tableHost"></div>
</div>

<!-- 明細 Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">員工明細</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="detailsBody">載入中...</div>
        </div>
    </div>
</div>
<!-- 新增 Modal -->
<div class="modal fade" id="createEmpModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">新增員工</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="createEmpBody">載入中...</div>
        </div>
    </div>
</div>
<!-- 編輯 Modal -->
<div class="modal fade" id="updateEmpModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">更新員工</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="updateEmpBody">載入中...</div>
        </div>
    </div>
</div>
